package stackplate;

 
class Plate {
    private int plateId;
    private String plateName;
    private double plateCost;

    public Plate(int plateId, String plateName, double plateCost) {
        this.plateId = plateId;
        this.plateName = plateName;
        this.plateCost = plateCost;
    }

    @Override
    public String toString() {
        return "Plate ID: " + plateId + ", Plate Name: " + plateName + ", Plate Cost:" + plateCost;
    }
}


package stackplate;

import java.util.EmptyStackException;

class PlateStack {
    private int maxSize;
    private int top;
    private Plate[] stackArray;

    public PlateStack(int size) {
        maxSize = size;
        stackArray = new Plate[maxSize];
        top = -1;
    }

    public void push(Plate plate) {
        if (isFull()) {
            System.out.println("Stack is full. Cannot push more plates.");
        } else {
            stackArray[++top] = plate;
            System.out.println("Plate pushed onto the stack.");
        }
    }

    public Plate pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        } else {
            Plate poppedPlate = stackArray[top--];
            System.out.println("Plate popped from the stack.");
            return poppedPlate;
        }
    }

    public Plate peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        } else {
            return stackArray[top];
        }
    }

    public boolean isFull() {
        return top == maxSize - 1;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
        } else {
            System.out.println("Stack content:");
            for (int i = 0; i <= top; i++) {
                System.out.println(stackArray[i]);
            }
        }
    }
}


package stackplate;

import java.util.EmptyStackException;
import java.util.Scanner;

public class PlateStackProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PlateStack plateStack = new PlateStack(5);

        int choice;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Push Plate");
            System.out.println("2. Pop Plate");
            System.out.println("3. Peek at Top Plate");
            System.out.println("4. Display Stack");
            System.out.println("5. Check if Stack is Empty");
            System.out.println("6. Check if Stack is Full");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");

            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter plate ID: ");
                    int plateId = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter plate name: ");
                    String plateName = scanner.nextLine();
                    System.out.print("Enter plate cost: $");
                    double plateCost = scanner.nextDouble();
                    plateStack.push(new Plate(plateId, plateName, plateCost));
                    break;

                case 2:
                    try {
                        Plate poppedPlate = plateStack.pop();
                        System.out.println("Popped Plate: " + poppedPlate);
                    } catch (EmptyStackException e) {
                        System.out.println("Stack is empty. Cannot pop.");
                    }
                    break;

                case 3:
                    try {
                        Plate topPlate = plateStack.peek();
                        System.out.println("Top Plate: " + topPlate);
                    } catch (EmptyStackException e) {
                        System.out.println("Stack is empty. No plate to peek.");
                    }
                    break;

                case 4:
                    plateStack.display();
                    break;

                case 5:
                    System.out.println("Stack is " + (plateStack.isEmpty() ? "empty" : "not empty"));
                    break;

                case 6:
                    System.out.println("Stack is " + (plateStack.isFull() ? "full" : "not full"));
                    break;

                case 7:
                    System.out.println("Exiting the program. Bye!");
                    break;

                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }

        } while (choice != 7);

        scanner.close();
    }
}