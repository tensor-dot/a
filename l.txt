package linkedlistexam1;

import java.util.Scanner;
public class MenuDrivenLinkedList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LinkedList1 productList = new LinkedList1();

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Insert at Start");
            System.out.println("2. Insert at End");
            System.out.println("3. Insert by Position");
            System.out.println("4. Insert by Value");
            System.out.println("5. Delete at Start");
            System.out.println("6. Delete at End");
            System.out.println("7. Delete by Value");
            System.out.println("8. Delete by Position");
            System.out.println("9. Print Alternate Nodes");
            System.out.println("10. Print Descending Order of Products (based on price)");
            System.out.println("11. Print Reverse Order");
            System.out.println("12. Display Products");
            System.out.println("13. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.println("Enter product details:");
                    System.out.print("ID: ");
                    int idStart = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Name: ");
                    String nameStart = scanner.nextLine();
                    System.out.print("Price: ");
                    double priceStart = scanner.nextDouble();
                    productList.insertAtStart(new Product1(idStart, nameStart, priceStart));
                    break;

                case 2:
                    System.out.println("Enter product details:");
                    System.out.print("ID: ");
                    int idEnd = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Name: ");
                    String nameEnd = scanner.nextLine();
                    System.out.print("Price: ");
                    double priceEnd = scanner.nextDouble();
                    productList.insertAtEnd(new Product1(idEnd, nameEnd, priceEnd));
                    break;

                case 3:
                    System.out.println("Enter product details:");
                    System.out.print("ID: ");
                    int idPos = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Name: ");
                    String namePos = scanner.nextLine();
                    System.out.print("Price: ");
                    double pricePos = scanner.nextDouble();
                    System.out.print("Enter position: ");
                    int position = scanner.nextInt();
                    productList.insertByPosition(new Product1(idPos, namePos, pricePos), position);
                    break;

                case 4:
                    System.out.println("Enter product details:");
                    System.out.print("ID: ");
                    int idValue = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Name: ");
                    String nameValue = scanner.nextLine();
                    System.out.print("Price: ");
                    double priceValue = scanner.nextDouble();
                    System.out.print("Enter value for ordering: ");
                    double orderingValue = scanner.nextDouble();
                    productList.insertByValue(new Product1(idValue, nameValue, priceValue), orderingValue);
                    break;

                case 5:
                    productList.deleteAtStart();
                    break;

                case 6:
                    productList.deleteAtEnd();
                    break;

                case 7:
                    System.out.print("Enter value to delete: ");
                    double deleteValue = scanner.nextDouble();
                    productList.deleteByValue(deleteValue);
                    break;

                case 8:
                    System.out.print("Enter position to delete: ");
                    int deletePosition = scanner.nextInt();
                    productList.deleteByPosition(deletePosition);
                    break;

                case 9:
                    productList.printAlternateNodes();
                    break;

                case 10:
                    productList.printDescendingOrder();
                    break;

                case 11:
                    System.out.println("Products in Reverse Order:");
                    productList.printReverseOrder();
                    break;

                case 12:
                    System.out.println("List of Products:");
                    productList.displayProducts();
                    break;

                case 13:
                    System.out.println("Exiting program.");
                    System.exit(0);

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}


	

package linkedlistexam1;


class LinkedList1 {
    private Node1 head;

    public LinkedList1() {
        this.head = null;
    }

    // Insert at the beginning
    public void insertAtStart(Product1 data) {
        Node1 newNode = new Node1(data);
        newNode.next = head;
        head = newNode;
    }

    // Insert at the end
    public void insertAtEnd(Product1 data) {
        Node1 newNode = new Node1(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node1 current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Insert by position
    public void insertByPosition(Product1 data, int position) {
        if (position < 1) {
            System.out.println("Invalid position");
            return;
        }

        Node1 newNode = new Node1(data);
        if (position == 1) {
            newNode.next = head;
            head = newNode;
            return;
        }

        Node1 current = head;
        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.next;
        }

        if (current == null) {
            System.out.println("Invalid position");
            return;
        }

        newNode.next = current.next;
        current.next = newNode;
    }

    // Insert by value
    public void insertByValue(Product1 data, double value) {
        Node1 newNode = new Node1(data);

        if (head == null || head.data.price > value) {
            newNode.next = head;
            head = newNode;
            return;
        }

        Node1 current = head;
        while (current.next != null && current.next.data.price <= value) {
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;
    }

    // Delete at the beginning
    public void deleteAtStart() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        head = head.next;
    }

    // Delete at the end
    public void deleteAtEnd() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        if (head.next == null) {
            head = null;
            return;
        }

        Node1 current = head;
        while (current.next.next != null) {
            current = current.next;
        }

        current.next = null;
    }

    // Delete by value
    public void deleteByValue(double value) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        if (head.data.price == value) {
            head = head.next;
            return;
        }

        Node1 current = head;
        while (current.next != null && current.next.data.price != value) {
            current = current.next;
        }

        if (current.next == null) {
            System.out.println("Value not found");
            return;
        }

        current.next = current.next.next;
    }

    // Delete by position
    public void deleteByPosition(int position) {
        if (head == null || position < 1) {
            System.out.println("Invalid position");
            return;
        }

        if (position == 1) {
            head = head.next;
            return;
        }

        Node1 current = head;
        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.next;
        }

        if (current == null || current.next == null) {
            System.out.println("Invalid position");
            return;
        }

        current.next = current.next.next;
    }

    // Print alternate nodes
    public void printAlternateNodes() {
        Node1 current = head;
        boolean print = true;

        while (current != null) {
            if (print) {
                System.out.println(current.data);
            }
            print = !print;
            current = current.next;
        }
    }

    
    	// Print in descending order of price
    	public void printDescendingOrder() {
    	    // Sort the list in descending order based on price
    	    bubbleSortDescending();

    	    // Print the sorted list
    	    displayProducts();
    	}

    	// Bubble Sort in Descending Order based on price
    	private void bubbleSortDescending() {
    	    if (head == null || head.next == null) {
    	        return;
    	    }

    	    boolean swapped;
    	    Node1 last = null;

    	    do {
    	        swapped = false;
    	        Node1 current = head;

    	        while (current.next != last) {
    	            if (current.data.price < current.next.data.price) {
    	                // Swap the products
    	                Product1 temp = current.data;
    	                current.data = current.next.data;
    	                current.next.data = temp;
    	                swapped = true;
    	            }
    	            current = current.next;
    	        }
    	        last = current;
    	    } while (swapped);
    	}
    

    // Print in reverse order
    public void printReverseOrder() {
        printReverseOrderHelper(head);
    }

    private void printReverseOrderHelper(Node1 current) {
        if (current == null) {
            return;
        }

        printReverseOrderHelper(current.next);
        System.out.println(current.data);
    }

    // Display the product with its attributes
    public void displayProducts() {
        Node1 current = head;

        while (current != null) {
            System.out.println(current.data);
            current = current.next;
        }
    }
}

package linkedlistexam1;



public class Node1 {
	 Product1 data;
	 Node1 next;

   public Node1(Product1 data) {
       this.data = data;
      this.next = null;
   }
}


package linkedlistexam1;



class Product1 {
    int id;
    String name;
    double price;

    public Product1(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Price: " + price;
    }
}